# Bandit Scanner Action
#
# This composite action executes Python security scanning using Bandit,
# providing configurable security analysis capabilities.
#
# Key Features:
# - Python code scanning
# - Severity configuration
# - Flexible scan scope
# - Multiple report formats
# - Custom rule support
#
# Process Stages:
# 1. Environment Setup:
#    - Python installation
#    - Bandit configuration
#    - Cache preparation
#
# 2. Scan Execution:
#    - Target determination
#    - Rule application
#    - Security analysis
#
# 3. Results Processing:
#    - Report generation
#    - Finding analysis
#    - Output formatting
#
# Required Inputs:
# - scan-scope: Files to scan
# - severity_level: Issue severity threshold
# - fail-on-findings: Whether to fail on issues
#
# Outputs:
# - scan_result: Scan exit code
# - report_path: Results location
#
# Example Usage:
# steps:
#   - uses: ./.github/actions/security/bandit
#     with:
#       scan-scope: "changed"
#       severity_level: "MEDIUM"
#
# Note: Configure Bandit settings in pyproject.toml for best results

name: "Bandit Security Scan"
description: "Runs Bandit security scanner with configurable options"

inputs:
  scan-scope:
    description: "Scope of files to scan (all/changed)"
    required: false
    default: "changed"
  paths:
    description: "Paths to scan when using all scope"
    required: false
    default: "." # all scope by default, exclude_dirs are taken from pyproject.toml
  config_file:
    description: "Path to pyproject.toml or custom bandit config"
    required: false
    default: "pyproject.toml"
  severity-level:
    description: "Minimum severity level to report (all/LOW/MEDIUM/HIGH)"
    default: "LOW"
  confidence-level:
    description: "Minimum confidence level to report (all/LOW/MEDIUM/HIGH)"
    required: false
    default: "LOW"
  output-format:
    description: "Format for scan results (json/txt/html/csv/sarif)"
    required: false
    default: "sarif" # by default to upload into Security tab
  fail-on-findings:
    description: "Whether to fail the action if issues are found"
    required: false
    default: "true"

outputs:
  scan_result:
    description: "Exit code of the Bandit scan"
    value: ${{ steps.run-bandit.outputs.exit_code }}
  report_path:
    description: "Path to the generated report file"
    value: ${{ steps.run-bandit.outputs.report_path }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: "3.10"

    - name: Install Bandit
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml,sarif]

    - name: Get changed files
      if: inputs.scan-scope == 'changed'
      id: changed-files
      uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46.0.3
      with:
        files: |
          **/*.py
          **/*.pyx
          **/*.pyi

    - name: Run Bandit scan
      id: run-bandit
      shell: bash
      env:
        INPUTS_SCAN_SCOPE: ${{ inputs.scan-scope }}
        INPUTS_PATHS: ${{ inputs.paths }}
        INPUTS_CONFIG_FILE: ${{ inputs.config_file }}
        INPUTS_SEVERITY_LEVEL: ${{ inputs.severity-level }}
        INPUTS_CONFIDENCE_LEVEL: ${{ inputs.confidence-level }}
        INPUTS_OUTPUT_FORMAT: ${{ inputs.output-format }}
        INPUTS_FAIL_ON_FINDINGS: ${{ inputs.fail-on-findings }}
      run: |
        set +e
        REPORT_FILE="bandit-report.$INPUTS_OUTPUT_FORMAT"

        # Convert severity and confidence to lowercase
        SEVERITY=$(echo "$INPUTS_SEVERITY_LEVEL" | tr '[:upper:]' '[:lower:]')
        CONFIDENCE=$(echo "$INPUTS_CONFIDENCE_LEVEL" | tr '[:upper:]' '[:lower:]')

        if [[ "$INPUTS_SCAN_SCOPE" == "changed" && -n "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
          echo "Running Bandit on changed files, output results into workflow log only"
          FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          bandit \
            -a file \
            -c "$INPUTS_CONFIG_FILE" \
            --severity-level ${SEVERITY} \
            --confidence-level ${CONFIDENCE} \
            -r ${FILES}
          exit_code="$?"
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

        elif [[ "$INPUTS_SCAN_SCOPE" == "all" ]] ; then
          echo "Running Bandit on all files in $INPUTS_PATHS"
          bandit \
            -c "$INPUTS_CONFIG_FILE" \
            --severity-level ${SEVERITY} \
            --confidence-level ${CONFIDENCE} \
            -f "$INPUTS_OUTPUT_FORMAT" \
            -o "${REPORT_FILE}" \
            -r "$INPUTS_PATHS"
          exit_code="$?"
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          echo "report_path=${REPORT_FILE}" >> $GITHUB_OUTPUT
        else
          echo "No files to scan found"
        fi

        if [[ "$INPUTS_FAIL_ON_FINDINGS" == "true" && -n "$exit_code" && "$exit_code" != "0" ]]; then
          exit $exit_code
        fi
